rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Users Collection
    // Admins can read/write any user.
    // Authenticated users can read the full list (for rosters) and get any single user doc.
    // Users can only create their own document and can only update their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      allow create, update: if request.auth.uid == userId;
    }

    // User States Collection
    // Admins can read/write any state.
    // Authenticated users can read the full list (for on-break list).
    // Users can only create/update their own state document.
    match /userStates/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin();
    }

    // Activity Collection
    // Admins can read/write any log.
    // Authenticated users can read the full list (for overbreak alerts).
    // Users can only create logs for themselves.
    match /activity/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == request.resource.data.uid || isAdmin();
    }

    // Timesheet Collection
    // Admins can read/write any entry.
    // Users can only list/read their own entries.
    // Users can only create entries for themselves.
    match /timesheet/{docId} {
      allow get, list: if request.auth.uid == resource.data.uid || isAdmin();
      allow write: if request.auth.uid == request.resource.data.uid || isAdmin();
    }
  }
}