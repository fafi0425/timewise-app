
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an Administrator
    function isAdmin(request) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Users can read/write their own profile, Admins can read any profile
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request);
      allow write: if request.auth.uid == userId;
    }

    // Users can read/write their own state, Admins can read any state
    match /userStates/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request);
      allow write: if request.auth.uid == userId;
    }
    
    // Users can create their own activity logs.
    // Users can list/read their own activity logs.
    // Admins can read any activity log.
    match /activity/{activityId} {
      allow create: if request.auth.uid != null && request.resource.data.uid == request.auth.uid;
      allow read, list: if (request.auth.uid != null && request.auth.uid == resource.data.uid) || isAdmin(request);
    }
    
    // Users can create their own timesheet entries.
    // Users can list/read their own timesheet entries.
    // Admins can read any timesheet entry.
    match /timesheet/{entryId} {
       allow create: if request.auth.uid != null && request.resource.data.uid == request.auth.uid;
       allow read, list: if (request.auth.uid != null && request.auth.uid == resource.data.uid) || isAdmin(request);
    }
  }
}
