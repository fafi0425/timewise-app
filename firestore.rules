rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users can read their own profile, admins can read anyone's.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator');
      allow write: if isSignedIn() && isOwner(userId);
      allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // User state can be read by anyone signed in (for dashboards), but only written by the owner.
    match /userStates/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // Activity logs can be read by admins, but only created by the owner of the log.
    match /activity/{logId} {
      allow read: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
      allow create: if isSignedIn() && isOwner(request.resource.data.uid);
      allow update, delete: if false; // Logs are immutable
    }

    // Overbreak logs can be read by anyone signed in (for team alerts), but are write-once.
    match /overbreaks/{logId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && isOwner(request.resource.data.uid);
        allow update, delete: if false; // Logs are immutable
    }
    
    // Timesheet entries can be read by the user or an admin, but only created by the user.
    match /timesheet/{entryId} {
      allow read: if isSignedIn() && (isOwner(resource.data.uid) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator');
      allow create: if isSignedIn() && isOwner(request.resource.data.uid);
      allow update, delete: if false; // Logs are immutable
    }
  }
}
