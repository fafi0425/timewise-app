rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an administrator
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Users can read their own data, and any authenticated user can list/get user info
    // for rosters and user profiles. Admins can read/write all user data.
    match /users/{userId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }
    
    // User states can be listed by any authenticated user for break/status lists.
    // Users can only write to their own state document. Admins have full access.
    match /userStates/{userId} {
      allow read, list: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin();
    }
    
    // Users can create their own activity logs.
    // They can only read/list logs that belong to them.
    // Admins have full read access to all logs.
    match /activity/{docId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, list: if (request.auth != null && resource.data.uid == request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Users can create their own timesheet entries.
    // They can only read/list timesheet entries that belong to them.
    // Admins have full read access to all entries.
    match /timesheet/{docId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, list: if (request.auth != null && resource.data.uid == request.auth.uid) || isAdmin();
    }
  }
}
