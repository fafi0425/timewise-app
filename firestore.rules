
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the requesting user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users can only read their own profile, but any authenticated user can create an account.
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
      // Admins can manage all user profiles.
      allow create, update, delete: if isAuthenticated() && request.auth.token.role == 'Administrator';
    }

    // A user can only read or write to their own state document.
    match /userStates/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Any authenticated user can read the activity log. This is required for some dashboard features.
    // Users can only create their own log entries. No one can update or delete them.
    match /activity/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.uid);
      allow update, delete: if false;
    }

    // Overbreaks are readable by any authenticated user for dashboard alerts.
    // They are created by server-side logic (a Cloud Function or secure action).
    match /overbreaks/{overbreakId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if false; // Should only be created by server logic
    }
    
    // Timesheet entries can only be created by the user they belong to.
    // They are readable by the user and by administrators.
    match /timesheet/{entryId} {
       allow read: if isAuthenticated() && (isOwner(resource.data.uid) || request.auth.token.role == 'Administrator');
       allow create: if isAuthenticated() && isOwner(request.resource.data.uid);
       allow update, delete: if false; // Logs should be immutable
    }
  }
}
