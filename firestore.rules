
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is an Administrator
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Users can read their own profile, Admins can read anyone's profile.
    // Users can only update their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAdmin(); // Only admins can create new users via server-side logic
      allow delete: if isAdmin();
    }
    
    // Users can only manage their own state document.
    match /userStates/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Activity logs are write-only from the client. Reading lists is done via server actions.
    match /activity/{docId} {
      allow read: if false; // Disallow client-side reads
      allow list: if false;
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Overbreak logs are write-only from the client.
    match /overbreaks/{docId} {
      allow read: if false; // Disallow client-side reads
      allow list: if false;
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Timesheet entries are write-only from the client.
    match /timesheet/{docId} {
       allow read: if false; // Disallow client-side reads
       allow list: if false;
       allow create: if isAuthenticated();
       allow update, delete: if false;
    }
  }
}
