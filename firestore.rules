rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'Administrator';
    }

    // Users can read and update their own profile information.
    // Administrators can read any user's profile.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin(request.auth.uid);
      // Allow admins to create users, but deny public user creation from client.
      allow create: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Users can read and write to their own state document.
    // Administrators can read any user's state.
    match /userStates/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Users can create their own activity logs.
    // Administrators can read all activity logs.
    match /activity/{logId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow list, read: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Users can create their own timesheet entries.
    // Administrators can read all timesheet entries.
    match /timesheet/{entryId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow list, read: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
