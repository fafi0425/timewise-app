rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the user is authenticated and their role is 'Administrator' in the users collection.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Admins have full access to everything.
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can create a user during sign-up.
      allow create: if true;
      // Any authenticated user can get or list user documents. This is needed for shift rosters and profile lookups.
      allow get, list: if isAuth();
      // A user can only update their own document.
      allow update: if isAuth() && request.auth.uid == userId;
      // Only admins can delete users (covered by the wildcard rule above).
      allow delete: if isAdmin();
    }

    // Rules for the 'userStates' collection
    match /userStates/{userId} {
       // Any authenticated user can get or list user states. Needed for real-time status components.
      allow get, list: if isAuth();
      // A user can only create or update their own state document.
      allow create, update: if isAuth() && request.auth.uid == userId;
      // Only admins can delete states.
      allow delete: if isAdmin();
    }

    // Rules for the 'activity' collection
    match /activity/{activityId} {
       // Any authenticated user can list the activity log. This is required for the Team Overbreak Alerts.
      allow list: if isAuth();
      // A user can only get their own specific activity logs.
      allow get: if isAuth() && resource.data.uid == request.auth.uid;
      // A user can only create activity logs for themselves.
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
       // No one but an admin can update or delete activity logs.
      allow update, delete: if isAdmin();
    }

    // Rules for the 'timesheet' collection
    match /timesheet/{timesheetId} {
      // Allow a user to query for their own timesheet entries.
      allow list: if isAuth() && request.query.get('where')[0][2] == request.auth.uid;
      // Allow a user to get their own specific timesheet entries.
      allow get: if isAuth() && resource.data.uid == request.auth.uid;
      // A user can only create timesheet entries for themselves.
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
      // No one but an admin can update or delete timesheet entries.
      allow update, delete: if isAdmin();
    }
  }
}
