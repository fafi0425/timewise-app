rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document.
      // Any authenticated user can read any user's profile (for lists, etc.).
      // Only the user themselves can update their own profile.
      allow read: if request.auth != null || isAdmin();
      allow write: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the 'userStates' collection
    match /userStates/{userId} {
      // Any authenticated user can read any user's state (for on-break lists).
      // Only the user themselves or an admin can update a user's state.
      allow read: if request.auth != null || isAdmin();
      allow write: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the 'activity' collection
    match /activity/{docId} {
      // Admins can read/write any activity log.
      // Users can create their own activity logs.
      // Users can get their own individual logs.
      // Users can list logs ONLY if they are querying for their own UID.
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      allow list: if (request.query.resource.data.uid == request.auth.uid && request.query.limit <= 100) || isAdmin();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if isAdmin();
    }

    // Rules for the 'timesheet' collection
    match /timesheet/{docId} {
      // Admins can read/write any timesheet entry.
      // Users can create their own timesheet entries.
      // Users can get their own individual entries.
      // Users can list entries ONLY if they are querying for their own UID.
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      allow list: if (request.query.resource.data.uid == request.auth.uid) || isAdmin();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if isAdmin();
    }
  }
}